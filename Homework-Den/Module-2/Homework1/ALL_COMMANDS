#1.	Generate and add package-lock.json file to git 


git add package-lock.json
git commit -m "Add package-lock.json"
git push origin main

#2.Build container image with different base image tags using build args, e.g. node:20 and node:latest and mark resulting messages with same tags 
#nodejs-app:20 and nodejs-app:latest


docker build --build-arg NODE_VERSION=20 -t nodejs-app:20 .
docker build --build-arg NODE_VERSION=latest -t nodejs-app:latest .
docker images(to check)
 
#3.	Run nodejs-app:latest in interactive mode, check available env variables and exit, the container should be automatically removed from the docker 
#ps -a list after that 


docker run --rm -it nodejs-app:latest sh
$ env
NODE_VERSION=21.6.1
HOSTNAME=076c63f8aaaf
YARN_VERSION=1.22.19
HOME=/home/node
TERM=xterm
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PWD=/app
$ exit

#4.	Run the nodejs-app container interactively and control the port it is using with ENV variables, change it to 5000, as a plus, use port 8000 to 
#access app in your browser


docker run --rm -it -p 8000:5000 nodejs-app:20 sh
$ node app.js
Server is running on port 5000
----HTTP://IP-ADD:8000 => Hello world message :)
 
#5.	Adjust Dockerfile to be able to control the used port during image build, the port defined on build should be used on run without additional configration 


ARG PORT
ENV PORT=${PORT}
EXPOSE ${PORT}


#6.Adjust Dockerfile to add labels to image, run it and use docker inspect to find them in container metadata

docker inspect --format='{{index .Config.Labels "version"}}' 41f1b8dde437
20.11.0

 
#7.	Add creation of app non-root user and configure to use that user for the app

maksym@makstymtsymbaliuk:~/Homework/Homework-Den/Homework1/nodejs$ docker run --rm -it nodejs-app:20 sh
$ whoami
node
$ exit
